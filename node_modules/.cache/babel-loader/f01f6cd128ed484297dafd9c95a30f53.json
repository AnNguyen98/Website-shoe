{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = __importStar(require(\"react\"));\n\nvar utils_1 = require(\"./utils\");\n\nvar types_1 = require(\"./types\");\n\nvar INCREASE_KEYS = ['ArrowRight', 'ArrowUp', 'k', 'PageUp'];\nvar DECREASE_KEYS = ['ArrowLeft', 'ArrowDown', 'j', 'PageDown'];\n\nvar Range =\n/** @class */\nfunction (_super) {\n  __extends(Range, _super);\n\n  function Range(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.trackRef = React.createRef();\n    _this.state = {\n      draggedThumbIndex: -1,\n      thumbZIndexes: new Array(_this.props.values.length).fill(0).map(function (t, i) {\n        return i;\n      }),\n      isChanged: false\n    };\n\n    _this.getOffsets = function () {\n      var _a = _this.props,\n          direction = _a.direction,\n          values = _a.values,\n          min = _a.min,\n          max = _a.max;\n      var trackElement = _this.trackRef.current;\n      var trackRect = trackElement.getBoundingClientRect();\n      var trackPadding = utils_1.getPadding(trackElement);\n      return _this.getThumbs().map(function (thumb, index) {\n        var thumbOffsets = {\n          x: 0,\n          y: 0\n        };\n        var thumbRect = thumb.getBoundingClientRect();\n        var thumbMargins = utils_1.getMargin(thumb);\n\n        switch (direction) {\n          case types_1.Direction.Right:\n            thumbOffsets.x = (thumbMargins.left + trackPadding.left) * -1;\n            thumbOffsets.y = ((thumbRect.height - trackRect.height) / 2 + trackPadding.top) * -1;\n            thumbOffsets.x += trackRect.width * utils_1.relativeValue(values[index], min, max) - thumbRect.width / 2;\n            return thumbOffsets;\n\n          case types_1.Direction.Left:\n            thumbOffsets.x = (thumbMargins.right + trackPadding.right) * -1;\n            thumbOffsets.y = ((thumbRect.height - trackRect.height) / 2 + trackPadding.top) * -1;\n            thumbOffsets.x += trackRect.width - trackRect.width * utils_1.relativeValue(values[index], min, max) - thumbRect.width / 2;\n            return thumbOffsets;\n\n          case types_1.Direction.Up:\n            thumbOffsets.x = ((thumbRect.width - trackRect.width) / 2 + thumbMargins.left + trackPadding.left) * -1;\n            thumbOffsets.y = -trackPadding.left;\n            thumbOffsets.y += trackRect.height - trackRect.height * utils_1.relativeValue(values[index], min, max) - thumbRect.height / 2;\n            return thumbOffsets;\n\n          case types_1.Direction.Down:\n            thumbOffsets.x = ((thumbRect.width - trackRect.width) / 2 + thumbMargins.left + trackPadding.left) * -1;\n            thumbOffsets.y = -trackPadding.left;\n            thumbOffsets.y += trackRect.height * utils_1.relativeValue(values[index], min, max) - thumbRect.height / 2;\n            return thumbOffsets;\n\n          default:\n            return utils_1.assertUnreachable(direction);\n        }\n      });\n    };\n\n    _this.getThumbs = function () {\n      if (_this.trackRef && _this.trackRef.current) {\n        return Array.from(_this.trackRef.current.children);\n      }\n\n      console.warn('No thumbs found in the track container. Did you forget to pass & spread the `props` param in renderTrack?');\n      return [];\n    };\n\n    _this.getTargetIndex = function (e) {\n      return _this.getThumbs().findIndex(function (child) {\n        return child === e.target || child.contains(e.target);\n      });\n    };\n\n    _this.addTouchEvents = function (e) {\n      e.preventDefault();\n      document.addEventListener('touchmove', _this.schdOnTouchMove, {\n        passive: false\n      });\n      document.addEventListener('touchend', _this.schdOnEnd);\n      document.addEventListener('touchcancel', _this.schdOnEnd);\n    };\n\n    _this.addMouseEvents = function (e) {\n      e.preventDefault();\n      document.addEventListener('mousemove', _this.schdOnMouseMove);\n      document.addEventListener('mouseup', _this.schdOnEnd);\n    };\n\n    _this.onMouseDownTrack = function (e) {\n      // in case there is a single thumb, we want to support\n      // moving the thumb to a place where the track is clicked\n      if (e.button !== 0 || _this.props.values.length > 1) return;\n      e.persist();\n\n      _this.addMouseEvents(e.nativeEvent);\n\n      _this.setState({\n        draggedThumbIndex: 0\n      }, function () {\n        return _this.onMove(e.clientX, e.clientY);\n      });\n    };\n\n    _this.onWindowResize = function () {\n      utils_1.translateThumbs(_this.getThumbs(), _this.getOffsets(), _this.props.rtl);\n    };\n\n    _this.onTouchStartTrack = function (e) {\n      // in case there is a single thumb, we want to support\n      // moving the thumb to a place where the track is clicked\n      if (_this.props.values.length > 1) return;\n      e.persist();\n\n      _this.addTouchEvents(e.nativeEvent);\n\n      _this.setState({\n        draggedThumbIndex: 0\n      }, function () {\n        return _this.onMove(e.touches[0].clientX, e.touches[0].clientY);\n      });\n    };\n\n    _this.onMouseOrTouchStart = function (e) {\n      if (_this.props.disabled) return;\n      var isTouch = utils_1.isTouchEvent(e);\n      if (!isTouch && e.button !== 0) return;\n\n      var index = _this.getTargetIndex(e);\n\n      if (index === -1) return;\n      e.preventDefault();\n\n      if (isTouch) {\n        _this.addTouchEvents(e);\n      } else {\n        _this.addMouseEvents(e);\n      }\n\n      _this.setState({\n        draggedThumbIndex: index,\n        thumbZIndexes: _this.state.thumbZIndexes.map(function (t, i) {\n          if (i === index) {\n            return Math.max.apply(Math, _this.state.thumbZIndexes);\n          }\n\n          return t <= _this.state.thumbZIndexes[index] ? t : t - 1;\n        })\n      });\n    };\n\n    _this.onMouseMove = function (e) {\n      e.preventDefault();\n\n      _this.onMove(e.clientX, e.clientY);\n    };\n\n    _this.onTouchMove = function (e) {\n      e.preventDefault();\n\n      _this.onMove(e.touches[0].clientX, e.touches[0].clientY);\n    };\n\n    _this.onKeyDown = function (e) {\n      var _a = _this.props,\n          values = _a.values,\n          onChange = _a.onChange,\n          step = _a.step,\n          rtl = _a.rtl;\n      var isChanged = _this.state.isChanged;\n\n      var index = _this.getTargetIndex(e.nativeEvent);\n\n      var inverter = rtl ? -1 : 1;\n      if (index === -1) return;\n\n      if (INCREASE_KEYS.includes(e.key)) {\n        e.preventDefault();\n\n        _this.setState({\n          draggedThumbIndex: index,\n          isChanged: true\n        });\n\n        onChange(utils_1.replaceAt(values, index, _this.normalizeValue(values[index] + inverter * (e.key === 'PageUp' ? step * 10 : step), index)));\n      } else if (DECREASE_KEYS.includes(e.key)) {\n        e.preventDefault();\n\n        _this.setState({\n          draggedThumbIndex: index,\n          isChanged: true\n        });\n\n        onChange(utils_1.replaceAt(values, index, _this.normalizeValue(values[index] - inverter * (e.key === 'PageDown' ? step * 10 : step), index)));\n      } else if (e.key === 'Tab') {\n        _this.setState({\n          draggedThumbIndex: -1\n        }, function () {\n          // If key pressed when thumb was moving, fire onFinalChange\n          if (isChanged) {\n            _this.fireOnFinalChange();\n          }\n        });\n      } else {\n        if (isChanged) {\n          _this.fireOnFinalChange();\n        }\n      }\n    };\n\n    _this.onKeyUp = function (e) {\n      var isChanged = _this.state.isChanged;\n\n      _this.setState({\n        draggedThumbIndex: -1\n      }, function () {\n        if (isChanged) {\n          _this.fireOnFinalChange();\n        }\n      });\n    };\n\n    _this.onMove = function (clientX, clientY) {\n      var draggedThumbIndex = _this.state.draggedThumbIndex;\n      var _a = _this.props,\n          direction = _a.direction,\n          min = _a.min,\n          max = _a.max,\n          onChange = _a.onChange,\n          values = _a.values,\n          step = _a.step,\n          rtl = _a.rtl;\n      if (draggedThumbIndex === -1) return null;\n      var trackElement = _this.trackRef.current;\n      var trackRect = trackElement.getBoundingClientRect();\n      var trackLength = utils_1.isVertical(direction) ? trackRect.height : trackRect.width;\n      var newValue = 0;\n\n      switch (direction) {\n        case types_1.Direction.Right:\n          newValue = (clientX - trackRect.left) / trackLength * (max - min) + min;\n          break;\n\n        case types_1.Direction.Left:\n          newValue = (trackLength - (clientX - trackRect.left)) / trackLength * (max - min) + min;\n          break;\n\n        case types_1.Direction.Down:\n          newValue = (clientY - trackRect.top) / trackLength * (max - min) + min;\n          break;\n\n        case types_1.Direction.Up:\n          newValue = (trackLength - (clientY - trackRect.top)) / trackLength * (max - min) + min;\n          break;\n\n        default:\n          utils_1.assertUnreachable(direction);\n      } // invert for RTL\n\n\n      if (rtl) {\n        newValue = max + min - newValue;\n      }\n\n      if (Math.abs(values[draggedThumbIndex] - newValue) >= step) {\n        onChange(utils_1.replaceAt(values, draggedThumbIndex, _this.normalizeValue(newValue, draggedThumbIndex)));\n      }\n    };\n\n    _this.normalizeValue = function (value, index) {\n      var _a = _this.props,\n          min = _a.min,\n          max = _a.max,\n          step = _a.step,\n          allowOverlap = _a.allowOverlap,\n          values = _a.values;\n      return utils_1.normalizeValue(value, index, min, max, step, allowOverlap, values);\n    };\n\n    _this.onEnd = function (e) {\n      e.preventDefault();\n      document.removeEventListener('mousemove', _this.schdOnMouseMove);\n      document.removeEventListener('touchmove', _this.schdOnTouchMove);\n      document.removeEventListener('mouseup', _this.schdOnEnd);\n      document.removeEventListener('touchup', _this.schdOnEnd);\n      document.removeEventListener('touchcancel', _this.schdOnEnd);\n\n      _this.setState({\n        draggedThumbIndex: -1\n      }, function () {\n        _this.fireOnFinalChange();\n      });\n    };\n\n    _this.fireOnFinalChange = function () {\n      _this.setState({\n        isChanged: false\n      });\n\n      var _a = _this.props,\n          onFinalChange = _a.onFinalChange,\n          values = _a.values;\n\n      if (onFinalChange) {\n        onFinalChange(values);\n      }\n    };\n\n    _this.schdOnMouseMove = utils_1.schd(_this.onMouseMove);\n    _this.schdOnTouchMove = utils_1.schd(_this.onTouchMove);\n    _this.schdOnEnd = utils_1.schd(_this.onEnd);\n    _this.schdOnWindowResize = utils_1.schd(_this.onWindowResize);\n    return _this;\n  }\n\n  Range.prototype.componentDidMount = function () {\n    var _this = this;\n\n    window.addEventListener('resize', this.schdOnWindowResize);\n    document.addEventListener('touchstart', this.onMouseOrTouchStart, {\n      passive: false\n    });\n    document.addEventListener('mousedown', this.onMouseOrTouchStart, {\n      passive: false\n    });\n    !this.props.allowOverlap && utils_1.checkInitialOverlap(this.props.values);\n    this.props.values.forEach(function (value) {\n      return utils_1.checkBoundaries(value, _this.props.min, _this.props.max);\n    });\n    utils_1.translateThumbs(this.getThumbs(), this.getOffsets(), this.props.rtl);\n  };\n\n  Range.prototype.componentDidUpdate = function (prevProps) {\n    utils_1.translateThumbs(this.getThumbs(), this.getOffsets(), this.props.rtl);\n  };\n\n  Range.prototype.componentWillUnmount = function () {\n    window.removeEventListener('resize', this.schdOnWindowResize);\n    document.removeEventListener('mousedown', this.onMouseOrTouchStart);\n    document.removeEventListener('touchstart', this.onMouseOrTouchStart);\n    document.removeEventListener('touchend', this.schdOnEnd);\n  };\n\n  Range.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        renderTrack = _a.renderTrack,\n        renderThumb = _a.renderThumb,\n        values = _a.values,\n        min = _a.min,\n        max = _a.max,\n        allowOverlap = _a.allowOverlap,\n        disabled = _a.disabled;\n    var _b = this.state,\n        draggedThumbIndex = _b.draggedThumbIndex,\n        thumbZIndexes = _b.thumbZIndexes;\n    return renderTrack({\n      props: {\n        style: {\n          // creates stacking context that prevents z-index applied to thumbs \n          // interfere with other elements\n          transform: 'scale(1)',\n          cursor: draggedThumbIndex > -1 ? 'grabbing' : values.length === 1 && !disabled ? 'pointer' : 'inherit'\n        },\n        onMouseDown: disabled ? utils_1.voidFn : this.onMouseDownTrack,\n        onTouchStart: disabled ? utils_1.voidFn : this.onTouchStartTrack,\n        ref: this.trackRef\n      },\n      isDragged: this.state.draggedThumbIndex > -1,\n      disabled: disabled,\n      children: values.map(function (value, index) {\n        var isDragged = _this.state.draggedThumbIndex === index;\n        return renderThumb({\n          index: index,\n          value: value,\n          isDragged: isDragged,\n          props: {\n            style: {\n              position: 'absolute',\n              zIndex: thumbZIndexes[index],\n              cursor: disabled ? 'inherit' : isDragged ? 'grabbing' : 'grab',\n              userSelect: 'none',\n              touchAction: 'none',\n              WebkitUserSelect: 'none',\n              MozUserSelect: 'none',\n              msUserSelect: 'none'\n            },\n            key: index,\n            tabIndex: disabled ? undefined : 0,\n            'aria-valuemax': allowOverlap ? max : values[index + 1] || max,\n            'aria-valuemin': allowOverlap ? min : values[index - 1] || min,\n            'aria-valuenow': value,\n            draggable: false,\n            role: 'slider',\n            onKeyDown: disabled ? utils_1.voidFn : _this.onKeyDown,\n            onKeyUp: disabled ? utils_1.voidFn : _this.onKeyUp\n          }\n        });\n      })\n    });\n  };\n\n  Range.defaultProps = {\n    step: 1,\n    direction: types_1.Direction.Right,\n    rtl: false,\n    disabled: false,\n    allowOverlap: false,\n    min: 0,\n    max: 100\n  };\n  return Range;\n}(React.Component);\n\nexports.default = Range;","map":null,"metadata":{},"sourceType":"script"}